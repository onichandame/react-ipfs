{"version":3,"sources":["components/common/input.tsx","components/panel.tsx","context/external.tsx","context/externalUrl.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","fields","onSubmit","submit","length","useState","initArr","i","push","val","setVal","uuid","label","e","preventDefault","Array","from","map","_","index","TextField","key","placeholder","isArray","onChange","newArr","currentTarget","value","Button","type","variant","encoder","TextEncoder","decoder","TextDecoder","Panel","ipfs","enqueueSnackbar","useSnackbar","fieldId","id","setId","peers","setPeers","files","setFiles","content","setContent","file","setFile","open","setOpen","updateFiles","useCallback","a","result","ls","name","cid","toString","useEffect","then","peersTimer","setInterval","swarm","clearInterval","readFile","addr","cat","message","Grid","container","direction","item","TableContainer","component","Paper","Table","size","aria-label","TableBody","TableRow","TableCell","scope","noValidate","autoComplete","event","write","create","style","display","htmlFor","pubsub","subscribe","msg","decode","data","publish","encode","Dialog","onClose","DialogContent","External","createContext","toggleExternal","external","ExternalUrl","setExternalUrl","externalUrl","NavBar","useContext","AppBar","position","Toolbar","Typography","noWrap","flexGrow","Switch","defaultValue","onBlur","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","App","styles","useReducer","old","useIpfs","opts","ipfsErr","Provider","className","spacing","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","maxSnack","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6e1a787a.chunk.js","sourcesContent":["import React, { FC, useState } from 'react'\nimport { TextField, Button } from '@material-ui/core'\nimport { v4 as uuid } from 'uuid'\n\ntype Props = {\n  onSubmit: (val: string[]) => void\n  submit?: string\n  fields?: string[] | number\n}\n\nexport const Input: FC<Props> = ({\n  fields = 1,\n  onSubmit,\n  submit = `submit`,\n}) => {\n  const length = typeof fields === 'number' ? fields : fields.length\n  const [val, setVal] = useState<string[]>(() => {\n    const initArr = []\n    for (let i = 0; i < length; ++i) initArr.push(``)\n    return initArr\n  })\n  const [label] = useState<string>(uuid())\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        onSubmit(val)\n      }}\n    >\n      {Array.from(new Array(length)).map((_, index) => (\n        <TextField\n          key={`${label}-${index}`}\n          placeholder={Array.isArray(fields) ? fields[index] : ``}\n          onChange={e => {\n            const newArr = Array.from(val)\n            newArr[index] = e.currentTarget.value\n            setVal(newArr)\n          }}\n        />\n      ))}\n      <Button type=\"submit\" variant=\"contained\">\n        {submit}\n      </Button>\n    </form>\n  )\n}\n","import React, { FC, useCallback, useState, useEffect } from 'react'\nimport { v1 as uuid } from 'uuid'\nimport { useIpfs } from 'react-ipfs-hook'\nimport { useSnackbar } from 'notistack'\nimport {\n  Dialog,\n  DialogContent,\n  Paper,\n  Button,\n  Grid,\n  TableContainer,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core'\n\nimport { Input } from './common'\n\ntype Ipfs = ReturnType<typeof useIpfs>[0]\n\ntype Props = {\n  ipfs: Ipfs | null\n}\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nexport const Panel: FC<Props> = ({ ipfs }) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const fieldId = `file-${uuid()}`\n  const [id, setId] = useState<string>(``)\n  const [peers, setPeers] = useState<number>(0)\n  const [files, setFiles] = useState<{ name: string; cid: string }[]>([])\n  const [content, setContent] = useState<string>(``)\n  const [file, setFile] = useState<File | null>(null)\n  const [open, setOpen] = useState<boolean>(false)\n  const updateFiles = useCallback(async () => {\n    if (ipfs) {\n      const result = []\n      for await (const file of ipfs.files.ls(`/`))\n        result.push({ name: file.name, cid: file.cid.toString() })\n      setFiles(result)\n    }\n  }, [ipfs])\n  useEffect(() => {\n    if (ipfs && ipfs.id) {\n      ipfs.id().then((id: any) => {\n        setId(id.id)\n        updateFiles()\n      })\n      const peersTimer = setInterval(async () => {\n        setPeers((await ipfs.swarm.peers()).length)\n      }, 1000)\n      return () => {\n        clearInterval(peersTimer)\n      }\n    }\n  }, [ipfs, updateFiles])\n  const readFile = useCallback(\n    async (addr: string) => {\n      if (ipfs && addr) {\n        try {\n          let result = ``\n          for await (const file of ipfs.cat(addr)) {\n            result = file.toString()\n            break // Read only one file\n          }\n          setContent(result)\n        } catch (e) {\n          setContent(e.message)\n        }\n        setOpen(true)\n      }\n    },\n    [ipfs]\n  )\n  return (\n    <>\n      <Grid container direction=\"column\">\n        <Grid item>\n          <TableContainer component={Paper}>\n            <Table size=\"small\" aria-label=\"node info\">\n              <TableBody>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    ID\n                  </TableCell>\n                  <TableCell>{id}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Peers\n                  </TableCell>\n                  <TableCell>{peers}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Publish\n                  </TableCell>\n                  <TableCell>\n                    <form\n                      noValidate\n                      autoComplete=\"off\"\n                      onSubmit={event => {\n                        event.preventDefault()\n                        if (ipfs && file)\n                          ipfs.files\n                            .write(`/${file.name}`, file, { create: true })\n                            .then(updateFiles)\n                      }}\n                    >\n                      <input\n                        id={fieldId}\n                        style={{ display: 'none' }}\n                        type=\"file\"\n                        onChange={e => {\n                          e.preventDefault()\n                          if (\n                            e.currentTarget.files &&\n                            e.currentTarget.files.length\n                          )\n                            setFile(e.currentTarget.files[0])\n                        }}\n                      />\n                      <label htmlFor={fieldId}>\n                        <Button variant=\"text\" component=\"span\">\n                          {file?.name || `choose a file`}\n                        </Button>\n                      </label>\n                      <Button type=\"submit\" variant=\"contained\">\n                        submit\n                      </Button>\n                    </form>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Read\n                  </TableCell>\n                  <TableCell>\n                    <Input onSubmit={val => readFile(val[0])} />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Subscribe\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      fields={[`topic`]}\n                      submit=\"subscribe\"\n                      onSubmit={async val => {\n                        if (ipfs) {\n                          await ipfs.pubsub.subscribe(val[0], (msg: any) => {\n                            enqueueSnackbar(\n                              `received message ${decoder.decode(msg.data)}`\n                            )\n                          })\n                          enqueueSnackbar(`subscribed to ${val}`)\n                        }\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Publish\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      submit=\"publish\"\n                      fields={[`topic`, `message`]}\n                      onSubmit={async val => {\n                        if (ipfs) {\n                          await ipfs.pubsub.publish(\n                            val[0],\n                            encoder.encode(val[1])\n                          )\n                          enqueueSnackbar(\n                            `published ${val[1]} to topic ${val[0]}`\n                          )\n                        }\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Files\n                  </TableCell>\n                  <TableCell>\n                    <TableContainer>\n                      <Table size=\"small\" aria-label={`file list ${uuid()}`}>\n                        <TableBody>\n                          {files.map(file => (\n                            <TableRow key={`file-${uuid()}`}>\n                              <TableCell>{file.name}</TableCell>\n                              <TableCell>{file.cid}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogContent>{content}</DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import { createContext } from 'react'\n\nconst External = createContext<{\n  external: boolean\n  toggleExternal: () => void\n}>({ toggleExternal: () => {}, external: false })\n\nexport { External }\n","import { createContext } from 'react'\n\nconst ExternalUrl = createContext<{\n  externalUrl: string\n  setExternalUrl: (val: string) => void\n}>({ setExternalUrl: () => {}, externalUrl: `http://localhost:5001` })\n\nexport { ExternalUrl }\n","import React, { FC, useContext } from 'react'\nimport {\n  TextField,\n  Switch,\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core'\n\nimport { External, ExternalUrl } from '../context'\n\nexport const NavBar: FC = () => {\n  const { externalUrl, setExternalUrl } = useContext(ExternalUrl)\n  const { external, toggleExternal } = useContext(External)\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" noWrap>\n          IPFS\n        </Typography>\n        <div style={{ flexGrow: 1 }} />\n        <Typography variant=\"h6\" noWrap>\n          {external ? `External` : `Embedded`}\n        </Typography>\n        <Switch value={external} onChange={toggleExternal} />\n        {external && (\n          <TextField\n            defaultValue={externalUrl}\n            onBlur={e => setExternalUrl(e.currentTarget.value)}\n          />\n        )}\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import React, { useState, useReducer } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useIpfs } from 'react-ipfs-hook'\nimport { Grid, Typography } from '@material-ui/core'\n\nimport { Panel, NavBar } from './components'\nimport { External, ExternalUrl } from './context'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nfunction App() {\n  const styles = useStyles()\n  const [externalUrl, setExternalUrl] = useState<string>(\n    `http://localhost:5001`\n  )\n  const [external, toggleExternal] = useReducer(old => !old, true)\n  const [ipfs, ipfsErr] = useIpfs({ external, opts: externalUrl })\n  return (\n    <ExternalUrl.Provider value={{ setExternalUrl, externalUrl }}>\n      <External.Provider value={{ external, toggleExternal }}>\n        <div className={styles.root}>\n          <NavBar />\n          <Grid container spacing={2} direction={'column'} alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"h5\">{`${\n                external ? `External` : `Embedded`\n              } IPFS Node`}</Typography>\n            </Grid>\n            <Grid item>\n              {(ipfsErr && ipfsErr.message) || <Panel ipfs={ipfs} />}\n            </Grid>\n          </Grid>\n        </div>\n      </External.Provider>\n    </ExternalUrl.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CssBaseline } from '@material-ui/core'\nimport { SnackbarProvider } from 'notistack'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={3}>\n        <App />\n      </SnackbarProvider>\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}