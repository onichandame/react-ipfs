{"version":3,"sources":["../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/httpClient.tsx","../../src/index.tsx","../../src/embedded.tsx","components/common/input.tsx","components/panel.tsx","components/embedded.tsx","components/external.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Symbol","useIpfs","opts","useState","ipfs","setIpfs","error","setError","lock","setLock","useEffect","startIpfs","console","Error","e","useIpfsHttpClient","body","recover","result","Ipfs","useIpfsEmbedded","Input","fields","onSubmit","submit","initArr","max","length","i","push","val","setVal","preventDefault","map","_","index","arr","TextField","label","Array","isArray","onChange","newArr","from","currentTarget","value","Button","type","variant","Panel","enqueueSnackbar","useSnackbar","fieldId","uuid","id","setId","peers","setPeers","files","setFiles","content","setContent","file","setFile","open","setOpen","updateFiles","useCallback","a","ls","name","cid","toString","then","setInterval","swarm","readFile","addr","cat","message","Grid","container","direction","item","TableContainer","component","Paper","Table","size","aria-label","TableBody","TableRow","TableCell","scope","noValidate","autoComplete","event","write","create","style","display","htmlFor","pubsub","subscribe","msg","JSON","stringify","data","publish","Dialog","onClose","DialogContent","Embedded","ipfsErr","spacing","alignItems","Typography","External","setAddr","external","href","defaultValue","onBlur","App","className","justify","xs","Divider","orientation","flexItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","maxSnack","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9e1c83b5.chunk.js","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { useState, useEffect } from 'react'\nimport Ipfs from 'ipfs-http-client'\n\nexport const useIpfsHttpClient = (\n  ...opts: ConstructorParameters<typeof Ipfs>\n): [Ipfs | null, Error | null] => {\n  const [ipfs, setIpfs] = useState<Ipfs | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [lock, setLock] = useState<Promise<any> | null>(null)\n\n  useEffect(() => {\n    // The fn to useEffect should not return anything other than a cleanup fn,\n    // So it cannot be marked async, which causes it to return a promise,\n    // Hence we delegate to a async fn rather than making the param an async fn.\n    async function startIpfs() {\n      if (ipfs) {\n        console.log('IPFS already started')\n      } else {\n        try {\n          if (!opts || !opts[0]) {\n            setIpfs(null)\n            setError(new Error(`daemon address cannot be empty`))\n          } else {\n            console.time('IPFS Started')\n            setIpfs(new Ipfs(...opts))\n            console.timeEnd('IPFS Started')\n            setError(null)\n          }\n        } catch (e) {\n          console.error('IPFS init error:', e)\n          setIpfs(null)\n          setError(e)\n        }\n      }\n    }\n\n    if (!lock) setLock(startIpfs())\n    return () => {\n      setLock(null)\n    }\n  }, opts)\n\n  return [ipfs, error]\n}\n","import { useIpfsEmbedded } from './embedded'\nimport { useIpfsHttpClient } from './httpClient'\n\ntype ExternalProps = {\n  external: true\n  opts: Parameters<typeof useIpfsHttpClient>[0]\n}\ntype EmbeddedProps = {\n  external?: false\n}\n\ntype Props = ExternalProps | EmbeddedProps\n\nexport const useIpfs = (opts?: Props) => {\n  if (opts && opts.external) return useIpfsHttpClient(opts.opts)\n  else return useIpfsEmbedded()\n}\n","import { useState, useEffect } from 'react'\nimport Ipfs from 'ipfs'\n\nexport const useIpfsEmbedded = (): [Ipfs | null, Error | null] => {\n  const [ipfs, setIpfs] = useState<Ipfs | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n\n  let lock: Promise<any> | null = null\n  useEffect(() => {\n    // The fn to useEffect should not return anything other than a cleanup fn,\n    // So it cannot be marked async, which causes it to return a promise,\n    // Hence we delegate to a async fn rather than making the param an async fn.\n    async function startIpfs() {\n      if (ipfs) {\n        console.log('IPFS already started')\n      } else {\n        try {\n          console.time('IPFS Started')\n          setIpfs(await Ipfs.create())\n          console.timeEnd('IPFS Started')\n          setError(null)\n        } catch (e) {\n          console.error('IPFS init error:', e)\n          setIpfs(null)\n          setError(e)\n        }\n      }\n    }\n\n    if (!lock) lock = startIpfs()\n    return function cleanup() {\n      lock = null\n      if (ipfs && ipfs.stop) {\n        console.log('Stopping IPFS')\n        ipfs.stop().catch((err) => console.error(err))\n        setIpfs(null)\n        setError(null)\n      }\n    }\n  }, [])\n\n  return [ipfs, error]\n}\n","import React, { FC, useState } from 'react'\nimport { TextField, Button } from '@material-ui/core'\n\ntype Props = {\n  onSubmit: (val: string[]) => void\n  submit?: string\n  fields?: string[] | number\n}\n\nexport const Input: FC<Props> = ({\n  fields = 1,\n  onSubmit,\n  submit = `submit`,\n}) => {\n  const [val, setVal] = useState<string[]>(() => {\n    const initArr = []\n    let max = 0\n    if (typeof fields === 'number') max = fields\n    else max = fields.length\n    for (let i = 0; i < max; ++i) initArr.push(``)\n    return initArr\n  })\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        onSubmit(val)\n      }}\n    >\n      {val.map((_, index, arr) => (\n        <TextField\n          label={Array.isArray(fields) ? fields[index] : ``}\n          onChange={e => {\n            const newArr = Array.from(arr)\n            newArr[index] = e.currentTarget.value\n            setVal(newArr)\n          }}\n        />\n      ))}\n      <Button type=\"submit\" variant=\"contained\">\n        {submit}\n      </Button>\n    </form>\n  )\n}\n","import React, { FC, useCallback, useState, useEffect } from 'react'\nimport { v1 as uuid } from 'uuid'\nimport Ipfs from 'ipfs'\nimport { useSnackbar } from 'notistack'\nimport IpfsHttpClient from 'ipfs-http-client'\nimport {\n  Dialog,\n  DialogContent,\n  Paper,\n  Button,\n  Grid,\n  TableContainer,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core'\n\nimport { Input } from './common'\n\ntype Props = {\n  ipfs: Ipfs | IpfsHttpClient | null\n}\n\nexport const Panel: FC<Props> = ({ ipfs }) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const fieldId = `file-${uuid()}`\n  const [id, setId] = useState<string>(``)\n  const [peers, setPeers] = useState<number>(0)\n  const [files, setFiles] = useState<{ name: string; cid: string }[]>([])\n  const [content, setContent] = useState<string>(``)\n  const [file, setFile] = useState<File | null>(null)\n  const [open, setOpen] = useState<boolean>(false)\n  const updateFiles = useCallback(async () => {\n    if (ipfs) {\n      const result = []\n      for await (const file of ipfs.files.ls(`/`))\n        result.push({ name: file.name, cid: file.cid.toString() })\n      setFiles(result)\n    }\n  }, [ipfs])\n  useEffect(() => {\n    if (ipfs) {\n      ipfs.id().then(id => setId(id.id))\n      setInterval(async () => {\n        setPeers((await ipfs.swarm.peers()).length)\n      }, 1000)\n      updateFiles()\n    }\n  }, [ipfs, updateFiles])\n  const readFile = useCallback(\n    async (addr: string) => {\n      if (ipfs && addr) {\n        try {\n          let result = ``\n          for await (const file of ipfs.cat(addr)) {\n            result = file.toString()\n            break // Read only one file\n          }\n          setContent(result)\n        } catch (e) {\n          setContent(e.message)\n        }\n        setOpen(true)\n      }\n    },\n    [ipfs]\n  )\n  return (\n    <>\n      <Grid container direction=\"column\">\n        <Grid item>\n          <TableContainer component={Paper}>\n            <Table size=\"small\" aria-label=\"node info\">\n              <TableBody>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    ID\n                  </TableCell>\n                  <TableCell>{id}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Peers\n                  </TableCell>\n                  <TableCell>{peers}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Publish\n                  </TableCell>\n                  <TableCell>\n                    <form\n                      noValidate\n                      autoComplete=\"off\"\n                      onSubmit={event => {\n                        event.preventDefault()\n                        if (ipfs && file)\n                          ipfs.files\n                            .write(`/${file.name}`, file, { create: true })\n                            .then(updateFiles)\n                      }}\n                    >\n                      <input\n                        id={fieldId}\n                        style={{ display: 'none' }}\n                        type=\"file\"\n                        onChange={e => {\n                          e.preventDefault()\n                          if (\n                            e.currentTarget.files &&\n                            e.currentTarget.files.length\n                          )\n                            setFile(e.currentTarget.files[0])\n                        }}\n                      />\n                      <label htmlFor={fieldId}>\n                        <Button variant=\"text\" component=\"span\">\n                          {file?.name || `choose a file`}\n                        </Button>\n                      </label>\n                      <Button type=\"submit\" variant=\"contained\">\n                        submit\n                      </Button>\n                    </form>\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Read\n                  </TableCell>\n                  <TableCell>\n                    <Input onSubmit={val => readFile(val[0])} />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Subscribe\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      fields={[`topic`]}\n                      submit=\"subscribe\"\n                      onSubmit={val => {\n                        ipfs?.pubsub.subscribe(val, (msg: any) =>\n                          enqueueSnackbar(JSON.stringify(msg.data.toString()))\n                        )\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Publish\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      submit=\"publish\"\n                      fields={[`topic`, `message`]}\n                      onSubmit={val => {\n                        ipfs?.pubsub.publish(val[0], val[1])\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">\n                    Files\n                  </TableCell>\n                  <TableCell>\n                    <TableContainer>\n                      <TableBody>\n                        {files.map(file => (\n                          <TableRow>\n                            <TableCell>{file.name}</TableCell>\n                            <TableCell>{file.cid}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </TableContainer>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogContent>{content}</DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import React, { FC } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport { useIpfs } from 'react-ipfs-hook'\n\nimport { Panel } from './panel'\n\nexport const Embedded: FC = () => {\n  const [ipfs, ipfsErr] = useIpfs()\n  return (\n    <Grid container spacing={2} direction={'column'} alignItems=\"center\">\n      <Grid item>\n        <Typography variant=\"h5\">Embedded IPFS Node:</Typography>\n      </Grid>\n      <Grid item>{ipfsErr ? ipfsErr.message : <Panel ipfs={ipfs} />}</Grid>\n    </Grid>\n  )\n}\n","import React, { FC, useState } from 'react'\nimport { Grid, Typography, TextField } from '@material-ui/core'\nimport { useIpfs } from 'react-ipfs-hook'\n\nimport { Panel } from './panel'\n\nexport const External: FC = () => {\n  const [addr, setAddr] = useState<string>(`http://localhost:5001`)\n  const [ipfs, ipfsErr] = useIpfs({ external: true, opts: addr })\n  return (\n    <Grid container spacing={2} direction={'column'} alignItems=\"center\">\n      <Grid item>\n        <Grid container direction=\"row\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              <a href=\"https://onichandame.com/post/ipfs\">\n                External IPFS Node:\n              </a>\n            </Typography>\n          </Grid>\n          <Grid item>\n            <TextField\n              defaultValue={addr}\n              onBlur={e => {\n                if (e.currentTarget && e.currentTarget.value)\n                  setAddr(e.currentTarget.value)\n              }}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>{ipfsErr ? ipfsErr.message : <Panel ipfs={ipfs} />}</Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Divider } from '@material-ui/core'\n\nimport { Embedded, External } from './components'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" justify=\"center\">\n        <Grid item xs={5}>\n          <Embedded />\n        </Grid>\n        <Divider orientation=\"vertical\" flexItem />\n        <Grid item xs={5}>\n          <External />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CssBaseline } from '@material-ui/core'\nimport { SnackbarProvider } from 'notistack'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={3}>\n        <App />\n      </SnackbarProvider>\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}